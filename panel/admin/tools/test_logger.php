<?php
declare(strict_types=1);
session_start();
$_SESSION['user']['owner_id'] = $_SESSION['user']['owner_id'] ?? 1;

require_once __DIR__ . '/../../includes/db.php';
require_once __DIR__ . '/../../includes/log.php';

header('Content-Type: text/plain; charset=utf-8');

$owner = (int)($_SESSION['user']['owner_id'] ?? 0);

// wykryj ≈õcie≈ºkƒô, kt√≥rƒÖ u≈ºywa LogEngine (mamy helper? ‚Äì je≈õli nie, wpisz rƒôcznie /var/app.log)
$root = realpath(__DIR__ . '/../../');
$logFile = $root . '/var/app.log';

echo "== TEST LOGGER ==\n";
echo "üë§ owner_id: $owner\n";
echo "üìÑ log_file: $logFile\n";

// 1) spr√≥buj stworzyƒá plik w var/ (powinno siƒô udaƒá)
$probe = $root . '/var/logger_probe.log';
$ok = @file_put_contents($probe, date('c')." probe\n", FILE_APPEND);
echo "üìÑ probe:    $probe\n";
echo "üß™ probe write: " . ($ok !== false ? "OK\n" : "FAIL\n");

// 2) sanity PDO
echo "üîå PDO: " . (($pdo ?? null) instanceof PDO ? "OK\n" : "NULL\n");

// 3) wy≈õlij wpisy
logg('info', 'test', 'üß™ wpis INFO', ['foo'=>'bar'], ['context'=>'logger_test']);
logg('warning', 'test', '‚ö†Ô∏è wpis WARNING', ['issue'=>'config_missing'], ['context'=>'logger_test']);
logg('error', 'test', '‚ùå wpis ERROR', ['debug_id'=>uniqid('dbg_')], ['context'=>'logger_test']);

try { throw new RuntimeException('Wymuszony wyjƒÖtek'); }
catch (Throwable $e) { log_exception($e, 'test', 'üí• exception test', ['context'=>'logger_test']); }

echo "üì• Logi zosta≈Çy wys≈Çane do loggera.\n\n";

// 4) poka≈º ko≈Ñc√≥wkƒô pliku (bez shell_exec)
if (is_file($logFile)) {
    $tail = @file_get_contents($logFile);
    $tail = $tail !== false ? $tail : '';
    $last = implode("", array_slice(explode("\n", $tail), -10));
    echo "== TAIL app.log ==\n" . $last . "\n";
} else {
    echo "‚ö†Ô∏è Brak pliku app.log (sprawd≈∫ open_basedir/perm).\n";
}

echo "\n== KONIEC TESTU LOGGERA ==\n";
